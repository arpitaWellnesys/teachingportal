import { Injectable, Directive, HostListener, Input, Component, Output, ViewChild, EventEmitter, NgModule, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var OtpVerificationService = /** @class */ (function () {
    function OtpVerificationService() {
    }
    /**
     * @param {?} key
     * @return {?}
     */
    OtpVerificationService.prototype.isBackspace = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return key === 'Backspace';
    };
    OtpVerificationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    OtpVerificationService.ctorParameters = function () { return []; };
    /** @nocollapse */ OtpVerificationService.ngInjectableDef = defineInjectable({ factory: function OtpVerificationService_Factory() { return new OtpVerificationService(); }, token: OtpVerificationService, providedIn: "root" });
    return OtpVerificationService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var OtpVerificationComponent = /** @class */ (function () {
    function OtpVerificationComponent(otpVerificationService) {
        this.otpVerificationService = otpVerificationService;
        this.otpOut = new EventEmitter();
        this.specialKeys = [
            'CapsLock', 'ControlLeft', 'ControlRight', 'ShiftLeft', 'ShiftRight',
            'AltLeft', 'AltRight', 'Escape', 'Backquote', 'ArrowUp',
            'Space', 'ArrowDown', 'Delete', 'Insert', 'End',
            'Home', 'PageDown', 'ArrowRight', 'WakeUp'
        ];
        this.inputLimt = [];
    }
    /**
     * @param {?} event
     * @param {?} next
     * @param {?} previous
     * @param {?} current
     * @return {?}
     */
    OtpVerificationComponent.prototype.nextDigit = /**
     * @param {?} event
     * @param {?} next
     * @param {?} previous
     * @param {?} current
     * @return {?}
     */
    function (event, next, previous, current) {
        if (this.specialKeys.includes(event.code)) {
            return;
        }
        if (!this.otpVerificationService.isBackspace(event.key) && !this.isAlphanumeric && isNaN(event.key)) {
            current.value = '';
            return;
        }
        if (this.otpVerificationService.isBackspace(event.key)) {
            if (current.value !== '' && previous) {
                current.value = '';
                previous.focus();
            }
            else if (previous) {
                previous.value = '';
                previous.focus();
            }
            else {
                current.value = '';
            }
        }
        else if (!this.otpVerificationService.isBackspace(event.key)) {
            if (event.key.length === 1) {
                if (event.getModifierState('CapsLock')) {
                    current.value = event.key.toUpperCase();
                }
                else {
                    current.value = event.key;
                }
            }
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (next) {
                    next.focus();
                }
            }));
        }
        this.returnOtp();
    };
    /**
     * @return {?}
     */
    OtpVerificationComponent.prototype.returnOtp = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var otp = '';
        Array.from(this.otpVal.nativeElement.children).forEach((/**
         * @param {?} child
         * @return {?}
         */
        function (child) {
            if (!child['value']) {
                return;
            }
            otp += child['value'];
        }));
        if (otp.length === 4) {
            this.otpOut.emit(otp);
        }
    };
    OtpVerificationComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-otp',
                    template: "<div class=\"angular-otp__wrap\">\n  <form autocomplete=\"off\" novalidate>\n    <div class=\"angular-otp__input-div\" #otp>\n      <input type=\"text\" angularOnlyNumber [isAlphanumeric]=\"isAlphanumeric\" #otpDigit1 autofocus\n        (keydown)=\"nextDigit($event, otpDigit2, 0, otpDigit1)\" name=\"digit1\" placeholder=\"-\" maxlength=\"1\">\n      <input type=\"text\" angularOnlyNumber [isAlphanumeric]=\"isAlphanumeric\" #otpDigit2\n        (keydown)=\"nextDigit($event, otpDigit3, otpDigit1, otpDigit2)\" name=\"digit2\" placeholder=\"-\" maxlength=\"1\">\n      <input type=\"text\" angularOnlyNumber [isAlphanumeric]=\"isAlphanumeric\" #otpDigit3\n        (keydown)=\"nextDigit($event, otpDigit4, otpDigit2, otpDigit3)\" name=\"digit3\" placeholder=\"-\" maxlength=\"1\">\n      <input type=\"text\" angularOnlyNumber [isAlphanumeric]=\"isAlphanumeric\" #otpDigit4\n        (keydown)=\"nextDigit($event, 0, otpDigit3, otpDigit4)\" name=\"digit4\" placeholder=\"-\" maxlength=\"1\">\n    </div>\n  </form>\n</div>",
                    styles: [".angular-otp__input-div{border-bottom:2px solid #d7d7d7;justify-content:center;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content}.angular-otp__input-div input{width:42px;height:45px;background:0 0;border:none;text-align:center;font-size:25px;font-weight:600;outline:0}"]
                }] }
    ];
    /** @nocollapse */
    OtpVerificationComponent.ctorParameters = function () { return [
        { type: OtpVerificationService }
    ]; };
    OtpVerificationComponent.propDecorators = {
        isAlphanumeric: [{ type: Input }],
        otpOut: [{ type: Output }],
        otpVal: [{ type: ViewChild, args: ['otp',] }]
    };
    return OtpVerificationComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var OtpVerificationDirective = /** @class */ (function () {
    function OtpVerificationDirective() {
        this.isAlphanumeric = true;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    OtpVerificationDirective.prototype.onKeyDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!this.isAlphanumeric && (e.shiftKey || !(/Digit[0-9]/.test(e.code) || /Numpad[0-9]/.test(e.code)))) {
            e.preventDefault();
        }
        if (this.isAlphanumeric && !/Key[A-Z]/.test(e.code)) {
            e.preventDefault();
        }
    };
    OtpVerificationDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[angularOnlyNumber]'
                },] }
    ];
    OtpVerificationDirective.propDecorators = {
        isAlphanumeric: [{ type: Input }],
        onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return OtpVerificationDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var OtpVerificationModule = /** @class */ (function () {
    function OtpVerificationModule() {
    }
    OtpVerificationModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [OtpVerificationComponent, OtpVerificationDirective],
                    imports: [],
                    providers: [],
                    exports: [OtpVerificationComponent]
                },] }
    ];
    return OtpVerificationModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { OtpVerificationService, OtpVerificationComponent, OtpVerificationModule, OtpVerificationDirective as Éµa };

//# sourceMappingURL=otp-verification.js.map