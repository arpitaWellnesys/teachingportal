/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, ViewChild, EventEmitter, Input, ElementRef } from '@angular/core';
import { OtpVerificationService } from './otp-verification.service';
export class OtpVerificationComponent {
    /**
     * @param {?} otpVerificationService
     */
    constructor(otpVerificationService) {
        this.otpVerificationService = otpVerificationService;
        this.otpOut = new EventEmitter();
        this.specialKeys = [
            'CapsLock', 'ControlLeft', 'ControlRight', 'ShiftLeft', 'ShiftRight',
            'AltLeft', 'AltRight', 'Escape', 'Backquote', 'ArrowUp',
            'Space', 'ArrowDown', 'Delete', 'Insert', 'End',
            'Home', 'PageDown', 'ArrowRight', 'WakeUp'
        ];
        this.inputLimt = [];
    }
    /**
     * @param {?} event
     * @param {?} next
     * @param {?} previous
     * @param {?} current
     * @return {?}
     */
    nextDigit(event, next, previous, current) {
        if (this.specialKeys.includes(event.code)) {
            return;
        }
        if (!this.otpVerificationService.isBackspace(event.key) && !this.isAlphanumeric && isNaN(event.key)) {
            current.value = '';
            return;
        }
        if (this.otpVerificationService.isBackspace(event.key)) {
            if (current.value !== '' && previous) {
                current.value = '';
                previous.focus();
            }
            else if (previous) {
                previous.value = '';
                previous.focus();
            }
            else {
                current.value = '';
            }
        }
        else if (!this.otpVerificationService.isBackspace(event.key)) {
            if (event.key.length === 1) {
                if (event.getModifierState('CapsLock')) {
                    current.value = event.key.toUpperCase();
                }
                else {
                    current.value = event.key;
                }
            }
            setTimeout((/**
             * @return {?}
             */
            () => {
                if (next) {
                    next.focus();
                }
            }));
        }
        this.returnOtp();
    }
    /**
     * @return {?}
     */
    returnOtp() {
        /** @type {?} */
        let otp = '';
        Array.from(this.otpVal.nativeElement.children).forEach((/**
         * @param {?} child
         * @return {?}
         */
        child => {
            if (!child['value']) {
                return;
            }
            otp += child['value'];
        }));
        if (otp.length === 4) {
            this.otpOut.emit(otp);
        }
    }
}
OtpVerificationComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-otp',
                template: "<div class=\"angular-otp__wrap\">\n  <form autocomplete=\"off\" novalidate>\n    <div class=\"angular-otp__input-div\" #otp>\n      <input type=\"text\" angularOnlyNumber [isAlphanumeric]=\"isAlphanumeric\" #otpDigit1 autofocus\n        (keydown)=\"nextDigit($event, otpDigit2, 0, otpDigit1)\" name=\"digit1\" placeholder=\"-\" maxlength=\"1\">\n      <input type=\"text\" angularOnlyNumber [isAlphanumeric]=\"isAlphanumeric\" #otpDigit2\n        (keydown)=\"nextDigit($event, otpDigit3, otpDigit1, otpDigit2)\" name=\"digit2\" placeholder=\"-\" maxlength=\"1\">\n      <input type=\"text\" angularOnlyNumber [isAlphanumeric]=\"isAlphanumeric\" #otpDigit3\n        (keydown)=\"nextDigit($event, otpDigit4, otpDigit2, otpDigit3)\" name=\"digit3\" placeholder=\"-\" maxlength=\"1\">\n      <input type=\"text\" angularOnlyNumber [isAlphanumeric]=\"isAlphanumeric\" #otpDigit4\n        (keydown)=\"nextDigit($event, 0, otpDigit3, otpDigit4)\" name=\"digit4\" placeholder=\"-\" maxlength=\"1\">\n    </div>\n  </form>\n</div>",
                styles: [".angular-otp__input-div{border-bottom:2px solid #d7d7d7;justify-content:center;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content}.angular-otp__input-div input{width:42px;height:45px;background:0 0;border:none;text-align:center;font-size:25px;font-weight:600;outline:0}"]
            }] }
];
/** @nocollapse */
OtpVerificationComponent.ctorParameters = () => [
    { type: OtpVerificationService }
];
OtpVerificationComponent.propDecorators = {
    isAlphanumeric: [{ type: Input }],
    otpOut: [{ type: Output }],
    otpVal: [{ type: ViewChild, args: ['otp',] }]
};
if (false) {
    /** @type {?} */
    OtpVerificationComponent.prototype.isAlphanumeric;
    /** @type {?} */
    OtpVerificationComponent.prototype.otpOut;
    /** @type {?} */
    OtpVerificationComponent.prototype.otpVal;
    /** @type {?} */
    OtpVerificationComponent.prototype.specialKeys;
    /** @type {?} */
    OtpVerificationComponent.prototype.inputLimt;
    /**
     * @type {?}
     * @private
     */
    OtpVerificationComponent.prototype.otpVerificationService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3RwLXZlcmlmaWNhdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vdHAtdmVyaWZpY2F0aW9uLyIsInNvdXJjZXMiOlsibGliL290cC12ZXJpZmljYXRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFPcEUsTUFBTSxPQUFPLHdCQUF3Qjs7OztJQWlCbkMsWUFDVSxzQkFBOEM7UUFBOUMsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQWQ5QyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUkvQixnQkFBVyxHQUFHO1lBQ25CLFVBQVUsRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLFdBQVcsRUFBRSxZQUFZO1lBQ3BFLFNBQVMsRUFBRyxVQUFVLEVBQUssUUFBUSxFQUFRLFdBQVcsRUFBRSxTQUFTO1lBQ2pFLE9BQU8sRUFBSyxXQUFXLEVBQUksUUFBUSxFQUFRLFFBQVEsRUFBSyxLQUFLO1lBQzdELE1BQU0sRUFBTSxVQUFVLEVBQUssWUFBWSxFQUFJLFFBQVE7U0FDcEQsQ0FBQztRQUVLLGNBQVMsR0FBRyxFQUFFLENBQUM7SUFJbEIsQ0FBQzs7Ozs7Ozs7SUFFRSxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTztRQUM3QyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN6QyxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDbkcsT0FBTyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7WUFDbkIsT0FBTztTQUNSO1FBQ0QsSUFBSSxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN0RCxJQUFJLE9BQU8sQ0FBQyxLQUFLLEtBQUssRUFBRSxJQUFJLFFBQVEsRUFBRTtnQkFDcEMsT0FBTyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7Z0JBQ25CLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNsQjtpQkFBTSxJQUFJLFFBQVEsRUFBRTtnQkFDbkIsUUFBUSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7Z0JBQ3BCLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNsQjtpQkFBTTtnQkFDTCxPQUFPLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQzthQUNwQjtTQUNGO2FBQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzlELElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUMxQixJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsRUFBRTtvQkFDdEMsT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO2lCQUN6QztxQkFBTTtvQkFDTCxPQUFPLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7aUJBQzNCO2FBQ0Y7WUFDRCxVQUFVOzs7WUFBQyxHQUFHLEVBQUU7Z0JBQ2QsSUFBSSxJQUFJLEVBQUU7b0JBQ1IsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2lCQUNkO1lBQ0gsQ0FBQyxFQUFDLENBQUM7U0FDSjtRQUNELElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNuQixDQUFDOzs7O0lBRU0sU0FBUzs7WUFDVixHQUFHLEdBQUcsRUFBRTtRQUNaLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTzs7OztRQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzdELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQUUsT0FBTzthQUFFO1lBQ2hDLEdBQUcsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEIsQ0FBQyxFQUFDLENBQUM7UUFFSCxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQzs7O1lBdkVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsUUFBUTtnQkFDbEIseWdDQUFnRDs7YUFFakQ7Ozs7WUFOUSxzQkFBc0I7Ozs2QkFTNUIsS0FBSztxQkFFTCxNQUFNO3FCQUVOLFNBQVMsU0FBQyxLQUFLOzs7O0lBSmhCLGtEQUFpQzs7SUFFakMsMENBQXNDOztJQUV0QywwQ0FBcUM7O0lBRXJDLCtDQUtFOztJQUVGLDZDQUFzQjs7Ozs7SUFHcEIsMERBQXNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPdXRwdXQsIFZpZXdDaGlsZCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT3RwVmVyaWZpY2F0aW9uU2VydmljZSB9IGZyb20gJy4vb3RwLXZlcmlmaWNhdGlvbi5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmctb3RwJyxcbiAgdGVtcGxhdGVVcmw6ICcuL290cC12ZXJpZmljYXRpb24uY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9vdHAtdmVyaWZpY2F0aW9uLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgT3RwVmVyaWZpY2F0aW9uQ29tcG9uZW50IHtcblxuICBASW5wdXQoKSBpc0FscGhhbnVtZXJpYzogYm9vbGVhbjtcblxuICBAT3V0cHV0KCkgb3RwT3V0ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBWaWV3Q2hpbGQoJ290cCcpIG90cFZhbDogRWxlbWVudFJlZjtcblxuICBwdWJsaWMgc3BlY2lhbEtleXMgPSBbXG4gICAgJ0NhcHNMb2NrJywgJ0NvbnRyb2xMZWZ0JywgJ0NvbnRyb2xSaWdodCcsICdTaGlmdExlZnQnLCAnU2hpZnRSaWdodCcsXG4gICAgJ0FsdExlZnQnICwgJ0FsdFJpZ2h0JyAgICwgJ0VzY2FwZScgICAgICAsICdCYWNrcXVvdGUnLCAnQXJyb3dVcCcgICAsXG4gICAgJ1NwYWNlJyAgICwgJ0Fycm93RG93bicgICwgJ0RlbGV0ZScgICAgICAsICdJbnNlcnQnICAgLCAnRW5kJyAgICAgICAsXG4gICAgJ0hvbWUnICAgICwgJ1BhZ2VEb3duJyAgICwgJ0Fycm93UmlnaHQnICAsICdXYWtlVXAnXG4gIF07XG5cbiAgcHVibGljIGlucHV0TGltdCA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgb3RwVmVyaWZpY2F0aW9uU2VydmljZTogT3RwVmVyaWZpY2F0aW9uU2VydmljZVxuICApIHsgfVxuXG4gIHB1YmxpYyBuZXh0RGlnaXQoZXZlbnQsIG5leHQsIHByZXZpb3VzLCBjdXJyZW50KSB7XG4gICAgaWYgKHRoaXMuc3BlY2lhbEtleXMuaW5jbHVkZXMoZXZlbnQuY29kZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF0aGlzLm90cFZlcmlmaWNhdGlvblNlcnZpY2UuaXNCYWNrc3BhY2UoZXZlbnQua2V5KSAmJiAhdGhpcy5pc0FscGhhbnVtZXJpYyAmJiBpc05hTihldmVudC5rZXkpKSB7XG4gICAgICBjdXJyZW50LnZhbHVlID0gJyc7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLm90cFZlcmlmaWNhdGlvblNlcnZpY2UuaXNCYWNrc3BhY2UoZXZlbnQua2V5KSkge1xuICAgICAgaWYgKGN1cnJlbnQudmFsdWUgIT09ICcnICYmIHByZXZpb3VzKSB7XG4gICAgICAgIGN1cnJlbnQudmFsdWUgPSAnJztcbiAgICAgICAgcHJldmlvdXMuZm9jdXMoKTtcbiAgICAgIH0gZWxzZSBpZiAocHJldmlvdXMpIHtcbiAgICAgICAgcHJldmlvdXMudmFsdWUgPSAnJztcbiAgICAgICAgcHJldmlvdXMuZm9jdXMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnQudmFsdWUgPSAnJztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCF0aGlzLm90cFZlcmlmaWNhdGlvblNlcnZpY2UuaXNCYWNrc3BhY2UoZXZlbnQua2V5KSkge1xuICAgICAgaWYgKGV2ZW50LmtleS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgaWYgKGV2ZW50LmdldE1vZGlmaWVyU3RhdGUoJ0NhcHNMb2NrJykpIHtcbiAgICAgICAgICBjdXJyZW50LnZhbHVlID0gZXZlbnQua2V5LnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VycmVudC52YWx1ZSA9IGV2ZW50LmtleTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgbmV4dC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5yZXR1cm5PdHAoKTtcbiAgfVxuXG4gIHB1YmxpYyByZXR1cm5PdHAoKSB7XG4gICAgbGV0IG90cCA9ICcnO1xuICAgIEFycmF5LmZyb20odGhpcy5vdHBWYWwubmF0aXZlRWxlbWVudC5jaGlsZHJlbikuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICBpZiAoIWNoaWxkWyd2YWx1ZSddKSB7IHJldHVybjsgfVxuICAgICAgb3RwICs9IGNoaWxkWyd2YWx1ZSddO1xuICAgIH0pO1xuXG4gICAgaWYgKG90cC5sZW5ndGggPT09IDQpIHtcbiAgICAgIHRoaXMub3RwT3V0LmVtaXQob3RwKTtcbiAgICB9XG4gIH1cblxufVxuIl19